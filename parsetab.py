
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADDOP ALPAREN AND ARPAREN BREAK CASE CLPAREN COLON COMMA COMMENT CRPAREN DEFAULT ELSE EQUAL FLOAT FLOAT_NUMBER ID IF INPUT INT INT_NUMBER LETTER LPAREN MULOP NOT OR OUTPUT RELOP RPAREN SEMICOLON SPACE STATIC_CAST_FLOAT STATIC_CAST_INT SWITCH WHILE newlineprogram : declarations stmt_blockdeclarations : declarations declarationdeclarations : emptydeclaration : idlist COLON type SEMICOLONdeclaration : COMMENTtype : INTtype : FLOATidlist : idlist COMMA IDidlist : IDstmt_block : CLPAREN stmtlist CRPARENstmt_block : emptystmtlist : stmtlist stmtstmtlist : emptystmt : assignment_stmtstmt : input_stmtstmt : output_stmtstmt : if_stmtstmt : while_stmtstmt : switch_stmtstmt : break_stmtstmt : stmt_blockstmt : COMMENTassignment_stmt : ID EQUAL expression SEMICOLONinput_stmt : INPUT LPAREN ID RPAREN SEMICOLONoutput_stmt : OUTPUT LPAREN expression RPAREN SEMICOLONif_stmt : IF LPAREN boolexpr RPAREN stmt ELSE stmtwhile_stmt : WHILE LPAREN boolexpr RPAREN stmtswitch_stmt : SWITCH LPAREN expression RPAREN CLPAREN caselist DEFAULT COLON stmtlist CRPARENcaselist : caselist CASE INT_NUMBER COLON stmtlistcaselist : emptybreak_stmt : BREAK SEMICOLONboolexpr : boolexpr OR booltermboolexpr : booltermboolterm : boolterm AND boolfactorboolterm : boolfactorboolfactor : NOT LPAREN boolexpr RPARENboolfactor : expression RELOP expressionexpression : expression ADDOP termexpression : termterm : term MULOP factorterm : factorfactor : LPAREN expression RPARENfactor : CAST LPAREN expression RPARENfactor : IDfactor : numberCAST : STATIC_CAST_INTCAST : STATIC_CAST_FLOATnumber : INT_NUMBERnumber : FLOAT_NUMBERempty :'
    
_lr_action_items = {'CLPAREN':([0,2,3,5,6,7,9,11,12,15,16,17,18,19,20,21,22,23,24,25,43,44,65,72,77,78,83,84,90,93,97,100,102,103,104,105,],[-50,6,-3,-2,-50,-11,-5,6,-13,-10,-12,-14,-15,-16,-17,-18,-19,-20,-21,-22,-31,-4,-23,6,6,91,-24,-25,-27,6,-26,-50,6,-50,-28,6,]),'COMMENT':([0,2,3,5,6,7,9,11,12,15,16,17,18,19,20,21,22,23,24,25,43,44,65,72,77,83,84,90,93,97,100,102,103,104,105,],[-50,9,-3,-2,-50,-11,-5,25,-13,-10,-12,-14,-15,-16,-17,-18,-19,-20,-21,-22,-31,-4,-23,25,25,-24,-25,-27,25,-26,-50,25,-50,-28,25,]),'ID':([0,2,3,5,6,7,9,11,12,14,15,16,17,18,19,20,21,22,23,24,25,37,38,39,40,41,42,43,44,49,65,66,67,69,72,73,74,75,76,77,83,84,90,93,97,100,102,103,104,105,],[-50,10,-3,-2,-50,-11,-5,26,-13,36,-10,-12,-14,-15,-16,-17,-18,-19,-20,-21,-22,45,56,45,45,45,45,-31,-4,45,-23,45,45,45,26,45,45,45,45,26,-24,-25,-27,26,-26,-50,26,-50,-28,26,]),'$end':([0,1,2,3,4,5,7,9,15,44,],[-50,0,-50,-3,-1,-2,-11,-5,-10,-4,]),'CRPAREN':([6,7,11,12,15,16,17,18,19,20,21,22,23,24,25,43,65,77,83,84,90,93,97,100,102,104,],[-50,-11,15,-13,-10,-12,-14,-15,-16,-17,-18,-19,-20,-21,-22,-31,-23,-50,-24,-25,-27,-50,-26,-50,104,-28,]),'INPUT':([6,7,11,12,15,16,17,18,19,20,21,22,23,24,25,43,65,72,77,83,84,90,93,97,100,102,103,104,105,],[-50,-11,27,-13,-10,-12,-14,-15,-16,-17,-18,-19,-20,-21,-22,-31,-23,27,27,-24,-25,-27,27,-26,-50,27,-50,-28,27,]),'OUTPUT':([6,7,11,12,15,16,17,18,19,20,21,22,23,24,25,43,65,72,77,83,84,90,93,97,100,102,103,104,105,],[-50,-11,28,-13,-10,-12,-14,-15,-16,-17,-18,-19,-20,-21,-22,-31,-23,28,28,-24,-25,-27,28,-26,-50,28,-50,-28,28,]),'IF':([6,7,11,12,15,16,17,18,19,20,21,22,23,24,25,43,65,72,77,83,84,90,93,97,100,102,103,104,105,],[-50,-11,29,-13,-10,-12,-14,-15,-16,-17,-18,-19,-20,-21,-22,-31,-23,29,29,-24,-25,-27,29,-26,-50,29,-50,-28,29,]),'WHILE':([6,7,11,12,15,16,17,18,19,20,21,22,23,24,25,43,65,72,77,83,84,90,93,97,100,102,103,104,105,],[-50,-11,30,-13,-10,-12,-14,-15,-16,-17,-18,-19,-20,-21,-22,-31,-23,30,30,-24,-25,-27,30,-26,-50,30,-50,-28,30,]),'SWITCH':([6,7,11,12,15,16,17,18,19,20,21,22,23,24,25,43,65,72,77,83,84,90,93,97,100,102,103,104,105,],[-50,-11,31,-13,-10,-12,-14,-15,-16,-17,-18,-19,-20,-21,-22,-31,-23,31,31,-24,-25,-27,31,-26,-50,31,-50,-28,31,]),'BREAK':([6,7,11,12,15,16,17,18,19,20,21,22,23,24,25,43,65,72,77,83,84,90,93,97,100,102,103,104,105,],[-50,-11,32,-13,-10,-12,-14,-15,-16,-17,-18,-19,-20,-21,-22,-31,-23,32,32,-24,-25,-27,32,-26,-50,32,-50,-28,32,]),'ELSE':([7,15,17,18,19,20,21,22,23,24,25,43,65,72,77,83,84,85,90,93,97,104,],[-11,-10,-14,-15,-16,-17,-18,-19,-20,-21,-22,-31,-23,-50,-50,-24,-25,93,-27,-50,-26,-28,]),'DEFAULT':([7,12,15,16,17,18,19,20,21,22,23,24,25,43,65,77,83,84,90,91,93,95,96,97,103,104,105,],[-11,-13,-10,-12,-14,-15,-16,-17,-18,-19,-20,-21,-22,-31,-23,-50,-24,-25,-27,-50,-50,98,-30,-26,-50,-28,-29,]),'CASE':([7,12,15,16,17,18,19,20,21,22,23,24,25,43,65,77,83,84,90,91,93,95,96,97,103,104,105,],[-11,-13,-10,-12,-14,-15,-16,-17,-18,-19,-20,-21,-22,-31,-23,-50,-24,-25,-27,-50,-50,99,-30,-26,-50,-28,-29,]),'COLON':([8,10,36,98,101,],[13,-9,-8,100,103,]),'COMMA':([8,10,36,],[14,-9,-8,]),'INT':([13,],[34,]),'FLOAT':([13,],[35,]),'EQUAL':([26,],[37,]),'LPAREN':([27,28,29,30,31,37,39,40,41,42,49,50,52,53,61,66,67,69,73,74,75,76,],[38,39,40,41,42,49,49,49,49,49,49,69,-46,-47,75,49,49,49,49,49,49,49,]),'SEMICOLON':([32,33,34,35,45,46,47,48,51,54,55,70,71,79,80,81,92,],[43,44,-6,-7,-44,65,-39,-41,-45,-48,-49,83,84,-38,-40,-42,-43,]),'STATIC_CAST_INT':([37,39,40,41,42,49,66,67,69,73,74,75,76,],[52,52,52,52,52,52,52,52,52,52,52,52,52,]),'STATIC_CAST_FLOAT':([37,39,40,41,42,49,66,67,69,73,74,75,76,],[53,53,53,53,53,53,53,53,53,53,53,53,53,]),'INT_NUMBER':([37,39,40,41,42,49,66,67,69,73,74,75,76,99,],[54,54,54,54,54,54,54,54,54,54,54,54,54,101,]),'FLOAT_NUMBER':([37,39,40,41,42,49,66,67,69,73,74,75,76,],[55,55,55,55,55,55,55,55,55,55,55,55,55,]),'NOT':([40,41,73,74,75,],[61,61,61,61,61,]),'MULOP':([45,47,48,51,54,55,79,80,81,92,],[-44,67,-41,-45,-48,-49,67,-40,-42,-43,]),'ADDOP':([45,46,47,48,51,54,55,57,62,64,68,79,80,81,82,89,92,],[-44,66,-39,-41,-45,-48,-49,66,66,66,66,-38,-40,-42,66,66,-43,]),'RPAREN':([45,47,48,51,54,55,56,57,58,59,60,63,64,68,79,80,81,82,86,87,88,89,92,94,],[-44,-39,-41,-45,-48,-49,70,71,72,-33,-35,77,78,81,-38,-40,-42,92,-32,-34,94,-37,-43,-36,]),'RELOP':([45,47,48,51,54,55,62,79,80,81,92,],[-44,-39,-41,-45,-48,-49,76,-38,-40,-42,-43,]),'AND':([45,47,48,51,54,55,59,60,79,80,81,86,87,89,92,94,],[-44,-39,-41,-45,-48,-49,74,-35,-38,-40,-42,74,-34,-37,-43,-36,]),'OR':([45,47,48,51,54,55,58,59,60,63,79,80,81,86,87,88,89,92,94,],[-44,-39,-41,-45,-48,-49,73,-33,-35,73,-38,-40,-42,-32,-34,73,-37,-43,-36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,],[2,]),'empty':([0,2,6,11,72,77,91,93,100,102,103,105,],[3,7,12,7,7,7,96,7,12,7,12,7,]),'stmt_block':([2,11,72,77,93,102,105,],[4,24,24,24,24,24,24,]),'declaration':([2,],[5,]),'idlist':([2,],[8,]),'stmtlist':([6,100,103,],[11,102,105,]),'stmt':([11,72,77,93,102,105,],[16,85,90,97,16,16,]),'assignment_stmt':([11,72,77,93,102,105,],[17,17,17,17,17,17,]),'input_stmt':([11,72,77,93,102,105,],[18,18,18,18,18,18,]),'output_stmt':([11,72,77,93,102,105,],[19,19,19,19,19,19,]),'if_stmt':([11,72,77,93,102,105,],[20,20,20,20,20,20,]),'while_stmt':([11,72,77,93,102,105,],[21,21,21,21,21,21,]),'switch_stmt':([11,72,77,93,102,105,],[22,22,22,22,22,22,]),'break_stmt':([11,72,77,93,102,105,],[23,23,23,23,23,23,]),'type':([13,],[33,]),'expression':([37,39,40,41,42,49,69,73,74,75,76,],[46,57,62,62,64,68,82,62,62,62,89,]),'term':([37,39,40,41,42,49,66,69,73,74,75,76,],[47,47,47,47,47,47,79,47,47,47,47,47,]),'factor':([37,39,40,41,42,49,66,67,69,73,74,75,76,],[48,48,48,48,48,48,48,80,48,48,48,48,48,]),'CAST':([37,39,40,41,42,49,66,67,69,73,74,75,76,],[50,50,50,50,50,50,50,50,50,50,50,50,50,]),'number':([37,39,40,41,42,49,66,67,69,73,74,75,76,],[51,51,51,51,51,51,51,51,51,51,51,51,51,]),'boolexpr':([40,41,75,],[58,63,88,]),'boolterm':([40,41,73,75,],[59,59,86,59,]),'boolfactor':([40,41,73,74,75,],[60,60,60,87,60,]),'caselist':([91,],[95,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations stmt_block','program',2,'p_program','lexical_parser.py',40),
  ('declarations -> declarations declaration','declarations',2,'p_declarations_list','lexical_parser.py',45),
  ('declarations -> empty','declarations',1,'p_declarations_term','lexical_parser.py',54),
  ('declaration -> idlist COLON type SEMICOLON','declaration',4,'p_declaration','lexical_parser.py',59),
  ('declaration -> COMMENT','declaration',1,'p_declaration_comment','lexical_parser.py',64),
  ('type -> INT','type',1,'p_type_int','lexical_parser.py',68),
  ('type -> FLOAT','type',1,'p_type_float','lexical_parser.py',73),
  ('idlist -> idlist COMMA ID','idlist',3,'p_idlist_list','lexical_parser.py',78),
  ('idlist -> ID','idlist',1,'p_idlist_term','lexical_parser.py',85),
  ('stmt_block -> CLPAREN stmtlist CRPAREN','stmt_block',3,'p_stmt_block_list','lexical_parser.py',90),
  ('stmt_block -> empty','stmt_block',1,'p_stmt_block_empty','lexical_parser.py',95),
  ('stmtlist -> stmtlist stmt','stmtlist',2,'p_stmtlist_list','lexical_parser.py',100),
  ('stmtlist -> empty','stmtlist',1,'p_stmtlist_term','lexical_parser.py',107),
  ('stmt -> assignment_stmt','stmt',1,'p_stmt_asg','lexical_parser.py',112),
  ('stmt -> input_stmt','stmt',1,'p_stmt_input','lexical_parser.py',117),
  ('stmt -> output_stmt','stmt',1,'p_stmt_output','lexical_parser.py',122),
  ('stmt -> if_stmt','stmt',1,'p_stmt_if','lexical_parser.py',127),
  ('stmt -> while_stmt','stmt',1,'p_stmt_while','lexical_parser.py',132),
  ('stmt -> switch_stmt','stmt',1,'p_stmt_switch','lexical_parser.py',137),
  ('stmt -> break_stmt','stmt',1,'p_stmt_break','lexical_parser.py',142),
  ('stmt -> stmt_block','stmt',1,'p_stmt_block','lexical_parser.py',147),
  ('stmt -> COMMENT','stmt',1,'p_stmt_comment','lexical_parser.py',152),
  ('assignment_stmt -> ID EQUAL expression SEMICOLON','assignment_stmt',4,'p_assignment_stmt','lexical_parser.py',157),
  ('input_stmt -> INPUT LPAREN ID RPAREN SEMICOLON','input_stmt',5,'p_input_stmt','lexical_parser.py',163),
  ('output_stmt -> OUTPUT LPAREN expression RPAREN SEMICOLON','output_stmt',5,'p_output_stmt','lexical_parser.py',168),
  ('if_stmt -> IF LPAREN boolexpr RPAREN stmt ELSE stmt','if_stmt',7,'p_if_stmt','lexical_parser.py',173),
  ('while_stmt -> WHILE LPAREN boolexpr RPAREN stmt','while_stmt',5,'p_while_stmt','lexical_parser.py',178),
  ('switch_stmt -> SWITCH LPAREN expression RPAREN CLPAREN caselist DEFAULT COLON stmtlist CRPAREN','switch_stmt',10,'p_switch_stmt','lexical_parser.py',183),
  ('caselist -> caselist CASE INT_NUMBER COLON stmtlist','caselist',5,'p_caselist_list','lexical_parser.py',189),
  ('caselist -> empty','caselist',1,'p_caselist_term','lexical_parser.py',198),
  ('break_stmt -> BREAK SEMICOLON','break_stmt',2,'p_break_stmt','lexical_parser.py',203),
  ('boolexpr -> boolexpr OR boolterm','boolexpr',3,'p_boolexpr_or','lexical_parser.py',207),
  ('boolexpr -> boolterm','boolexpr',1,'p_boolexpr_term','lexical_parser.py',212),
  ('boolterm -> boolterm AND boolfactor','boolterm',3,'p_boolterm_and','lexical_parser.py',217),
  ('boolterm -> boolfactor','boolterm',1,'p_boolterm_term','lexical_parser.py',222),
  ('boolfactor -> NOT LPAREN boolexpr RPAREN','boolfactor',4,'p_boolfactor_not','lexical_parser.py',227),
  ('boolfactor -> expression RELOP expression','boolfactor',3,'p_boolfactor_relop','lexical_parser.py',232),
  ('expression -> expression ADDOP term','expression',3,'p_expression_list','lexical_parser.py',237),
  ('expression -> term','expression',1,'p_expression_term','lexical_parser.py',242),
  ('term -> term MULOP factor','term',3,'p_term_mulop','lexical_parser.py',247),
  ('term -> factor','term',1,'p_term_factor','lexical_parser.py',252),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','lexical_parser.py',257),
  ('factor -> CAST LPAREN expression RPAREN','factor',4,'p_factor_cast','lexical_parser.py',262),
  ('factor -> ID','factor',1,'p_factor_id','lexical_parser.py',267),
  ('factor -> number','factor',1,'p_factor_num','lexical_parser.py',272),
  ('CAST -> STATIC_CAST_INT','CAST',1,'p_CAST_int','lexical_parser.py',277),
  ('CAST -> STATIC_CAST_FLOAT','CAST',1,'p_CAST_float','lexical_parser.py',282),
  ('number -> INT_NUMBER','number',1,'p_number_int','lexical_parser.py',287),
  ('number -> FLOAT_NUMBER','number',1,'p_number_float','lexical_parser.py',292),
  ('empty -> <empty>','empty',0,'p_empty','lexical_parser.py',297),
]
